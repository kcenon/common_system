name: CI

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-15

    - name: Check formatting
      run: |
        find include -name "*.h" -o -name "*.hpp" | xargs clang-format-15 --dry-run --Werror
        find tests -name "*.cpp" | xargs clang-format-15 --dry-run --Werror || true
        find examples -name "*.cpp" | xargs clang-format-15 --dry-run --Werror || true

  header-guard-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check header guards
      run: |
        for file in $(find include -name "*.h" -o -name "*.hpp"); do
          guard=$(echo "$file" | tr '[:lower:]/' '[:upper:]_' | sed 's/[.-]/_/g' | sed 's/^.*INCLUDE_//')_
          if ! grep -q "#ifndef $guard" "$file" && ! grep -q "#pragma once" "$file"; then
            echo "Missing header guard in $file"
            exit 1
          fi
        done

  license-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check license headers
      run: |
        if [ ! -f LICENSE ]; then
          echo "LICENSE file not found"
          exit 1
        fi
        echo "✅ LICENSE file exists"

  quick-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Quick build test
      run: |
        # Test header-only compilation
        cat > test_compile.cpp << 'EOF'
        #include "include/kcenon/common/interfaces/executor_interface.h"
        #include "include/kcenon/common/patterns/result.h"
        #include "include/kcenon/common/patterns/event_bus.h"
        int main() {
            auto result = common::ok(42);
            return 0;
        }
        EOF
        g++ -std=c++17 -I. test_compile.cpp -o test_compile
        echo "✅ Headers compile successfully"

  create-release:
    needs: [format-check, header-guard-check, license-check, quick-build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Create Release Package
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        mkdir -p common_system-$VERSION
        cp -r include common_system-$VERSION/
        cp -r examples common_system-$VERSION/
        cp -r docs common_system-$VERSION/
        cp README.md LICENSE CMakeLists.txt vcpkg.json common_system-$VERSION/
        tar czf common_system-$VERSION.tar.gz common_system-$VERSION
        zip -r common_system-$VERSION.zip common_system-$VERSION

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          common_system-*.tar.gz
          common_system-*.zip
        draft: false
        prerelease: false
        generate_release_notes: true